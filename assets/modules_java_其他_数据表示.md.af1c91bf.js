import{_ as a,o as s,c as t,O as e}from"./chunks/framework.a9f788d3.js";const C=JSON.parse('{"title":"数据表示","description":"","frontmatter":{},"headers":[],"relativePath":"modules/java/其他/数据表示.md"}'),l={name:"modules/java/其他/数据表示.md"},n=e(`<h1 id="数据表示" tabindex="-1">数据表示 <a class="header-anchor" href="#数据表示" aria-label="Permalink to &quot;数据表示&quot;">​</a></h1><h2 id="进制转换" tabindex="-1">进制转换 <a class="header-anchor" href="#进制转换" aria-label="Permalink to &quot;进制转换&quot;">​</a></h2><h3 id="r进制转十进制" tabindex="-1">R进制转十进制 <a class="header-anchor" href="#r进制转十进制" aria-label="Permalink to &quot;R进制转十进制&quot;">​</a></h3><h4 id="按权展开法" tabindex="-1">按权展开法 <a class="header-anchor" href="#按权展开法" aria-label="Permalink to &quot;按权展开法&quot;">​</a></h4><p>将 R进制 的每一位数值用 R^k^ 形式表示, 即 幂 的底数是 R, 指数是 K. K 与该位和小数点之间的距离有关.<br> 当该数位于小数点的左边, k值是该位和小数点之间数码的个数;<br> 当该数位于小数点的右边, k值是负数, 其绝对值为该位和小数点之间数码的个数+1</p><p>示例:<br> 二进制:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">10100.01 = 1*2^4^ + 1*2^2^ + 1*2^-2^</span></span></code></pre></div><h3 id="十进制转r进制" tabindex="-1">十进制转R进制 <a class="header-anchor" href="#十进制转r进制" aria-label="Permalink to &quot;十进制转R进制&quot;">​</a></h3><h4 id="短除法" tabindex="-1">短除法 <a class="header-anchor" href="#短除法" aria-label="Permalink to &quot;短除法&quot;">​</a></h4><p>示例:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">19/2=9……1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">9/2=4……1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">4/2=2……0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">2/2=1……0</span></span></code></pre></div><h3 id="二进制转十六进制" tabindex="-1">二进制转十六进制 <a class="header-anchor" href="#二进制转十六进制" aria-label="Permalink to &quot;二进制转十六进制&quot;">​</a></h3><p>示例:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">二进制: 10001110</span></span>
<span class="line"><span style="color:#A6ACCD;">  八进制:  2  1  6 -&gt; 216</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">  二进制: 10001110</span></span>
<span class="line"><span style="color:#A6ACCD;">十六进制:    8   14 -&gt;  8e</span></span></code></pre></div><h2 id="浮点数表示" tabindex="-1">浮点数表示 <a class="header-anchor" href="#浮点数表示" aria-label="Permalink to &quot;浮点数表示&quot;">​</a></h2><p>N = M*R^e^</p><ul><li>M: 尾数</li><li>R: 基数</li><li>e: 指数</li></ul><p>计算方法:(基数相同的情况)</p><ol><li>对阶(指数调整为一致)</li><li>尾数计算</li><li>结果格式化</li></ol><h2 id="原码反码补码" tabindex="-1">原码反码补码 <a class="header-anchor" href="#原码反码补码" aria-label="Permalink to &quot;原码反码补码&quot;">​</a></h2><blockquote><p>计算机中一般使用补码形式存储</p></blockquote><p>参考文章:</p><ul><li><a href="https://blog.csdn.net/qq_45472866/article/details/114779170" target="_blank" rel="noreferrer">补码的符号位为什么能参与运算</a></li></ul><table><thead><tr><th></th><th>数值1</th><th>数值-1</th><th>数值1-1</th></tr></thead><tbody><tr><td>原码</td><td>0000 0001</td><td>1000 0001</td><td>1000 0010 -&gt; -2</td></tr><tr><td>反码</td><td>0000 0001</td><td>1111 1110</td><td>1111 1111 -&gt; -0</td></tr><tr><td>补码</td><td>0000 0001</td><td>1111 1111</td><td>0000 0000 -&gt; 0</td></tr><tr><td>移码</td><td>0000 0001</td><td>0111 1111</td><td>1000 0000 -&gt; 0</td></tr></tbody></table><p>1 byte(字节) = 8 (位) 表示范围: 原码: -(2^n-1^-1) ~ 2^n-1^-1 =&gt; 有两个0, 正零和负零 即 0 会占两个符号位 反码: -(2^n-1^-1) ~ 2^n-1^-1 =&gt; 有两个0, 正零和负零 即 0 会占两个符号位 补码: -2^n-1^ ~ 2^n-1^-1 =&gt; 只有一个0, 正零和负零的补码一致</p><h3 id="原码" tabindex="-1">原码 <a class="header-anchor" href="#原码" aria-label="Permalink to &quot;原码&quot;">​</a></h3><p>以二进制表示的数字</p><h3 id="反码" tabindex="-1">反码 <a class="header-anchor" href="#反码" aria-label="Permalink to &quot;反码&quot;">​</a></h3><ul><li>正数<br> 与原码相同</li><li>负数<br> 保留符号位不变, 其余按位取反</li></ul><h3 id="补码" tabindex="-1">补码 <a class="header-anchor" href="#补码" aria-label="Permalink to &quot;补码&quot;">​</a></h3><ul><li>正数<br> 原码相同</li><li>负数<br> 在反码的基础上, 加 1. <blockquote><p>即 相对于原码, 按位取反再加 1<br> 如果想要得到原码, 则仅需要将当前补码看作原码进行求补</p></blockquote></li></ul><h3 id="移码" tabindex="-1">移码 <a class="header-anchor" href="#移码" aria-label="Permalink to &quot;移码&quot;">​</a></h3><p>补码基础上, 符号位取反(所有, 包括符号位)</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">-3: 原码 1011 补码 1101</span></span>
<span class="line"><span style="color:#A6ACCD;">-1: 原码 1001 补码 1111</span></span>
<span class="line"><span style="color:#A6ACCD;">(-3)+(-1): 计算机中 补码相加 1 1100  =&gt;  对应原码: 1100  =&gt; 对应数值: -4</span></span></code></pre></div><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><h4 id="补码-1" tabindex="-1">补码 <a class="header-anchor" href="#补码-1" aria-label="Permalink to &quot;补码&quot;">​</a></h4><p><strong><code>two&#39;s complement</code></strong></p><p>对 2 求补, 这个 2 指的是计数系统的容量（模），就是计数系统所能表示的状态数</p><p>示例:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">在 4 位二进制中, 这个 2 就是 2^4^</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">1 个符号位 + 3 个数值位</span></span>
<span class="line"><span style="color:#A6ACCD;">=&gt; 则容量为 2^4^</span></span>
<span class="line"><span style="color:#A6ACCD;">=&gt; x 的补码为 (2^4^+x)%2^4^</span></span></code></pre></div><h4 id="反码-1" tabindex="-1">反码 <a class="header-anchor" href="#反码-1" aria-label="Permalink to &quot;反码&quot;">​</a></h4><p><strong><code>ones&#39; complement</code></strong></p><p>对 1 求补, 这个 1 指的是计数系统所能表示的最大的值</p><p>示例:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">8 位二进制中, 这个 1 就是 \`1111 1111\`, 在 1 位十进制中就是 9</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">1 个符号位 + 3 个数值位</span></span>
<span class="line"><span style="color:#A6ACCD;">=&gt; 则 1 表示 2^4^-1</span></span>
<span class="line"><span style="color:#A6ACCD;">=&gt; x 的反码为 (2^4^-1+x)%(2^4^-1)</span></span></code></pre></div><h4 id="补码的意义" tabindex="-1">补码的意义 <a class="header-anchor" href="#补码的意义" aria-label="Permalink to &quot;补码的意义&quot;">​</a></h4><p>就是把负数变成它对应的正数, 然后参与运算<br> 那么就不用进行减法运算了，只要使用加法就行了</p><h4 id="补码为什么等于反码加-1" tabindex="-1">补码为什么等于反码加 1 <a class="header-anchor" href="#补码为什么等于反码加-1" aria-label="Permalink to &quot;补码为什么等于反码加 1&quot;">​</a></h4><p>这个结论, 仅仅只是因为反码和补码的推导关系得出, 并没有实际意义</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">x 的反码 = (2^4^-1+x)%(2^4^-1)  </span></span>
<span class="line"><span style="color:#A6ACCD;">x 的补码 = (2^4^+x)%2^4^  </span></span>
<span class="line"><span style="color:#A6ACCD;">=&gt; 补码 = 反码 + 1</span></span></code></pre></div><h3 id="为什么补码的第一位数可以被看作符号位" tabindex="-1">为什么补码的第一位数可以被看作符号位 <a class="header-anchor" href="#为什么补码的第一位数可以被看作符号位" aria-label="Permalink to &quot;为什么补码的第一位数可以被看作符号位&quot;">​</a></h3><p>补码实际没有符号位, 所有的位数都需要参加运算, 这样才能满足计算机计算的需求, 因为计算机是不认识正负的.</p>`,53),o=[n];function p(r,i,c,d,h,u){return s(),t("div",null,o)}const A=a(l,[["render",p]]);export{C as __pageData,A as default};
