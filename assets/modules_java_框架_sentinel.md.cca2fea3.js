import{_ as s,o as a,c as l,O as n}from"./chunks/framework.a9f788d3.js";const d=JSON.parse('{"title":"sentinel","description":"","frontmatter":{},"headers":[],"relativePath":"modules/java/框架/sentinel.md"}'),o={name:"modules/java/框架/sentinel.md"},e=n(`<h1 id="sentinel" tabindex="-1">sentinel <a class="header-anchor" href="#sentinel" aria-label="Permalink to &quot;sentinel&quot;">​</a></h1><h2 id="定义资源" tabindex="-1">定义资源 <a class="header-anchor" href="#定义资源" aria-label="Permalink to &quot;定义资源&quot;">​</a></h2><h3 id="主流框架的默认适配" tabindex="-1">主流框架的默认适配 <a class="header-anchor" href="#主流框架的默认适配" aria-label="Permalink to &quot;主流框架的默认适配&quot;">​</a></h3><h3 id="抛出异常的方式定义资源" tabindex="-1">抛出异常的方式定义资源 <a class="header-anchor" href="#抛出异常的方式定义资源" aria-label="Permalink to &quot;抛出异常的方式定义资源&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1.5.0 版本开始可以利用 try-with-resources 特性</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 资源名可使用任意有业务语义的字符串, 比如方法名、接口名或其它可唯一标识的字符串 </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Entry</span><span style="color:#A6ACCD;"> entry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SphU</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entry</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">resourceName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 被保护的业务逻辑</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// do something here...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BlockException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 资源访问阻止, 被限流或被降级</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 在此处进行相应的处理操作</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="返回布尔值方式定义资源" tabindex="-1">返回布尔值方式定义资源 <a class="header-anchor" href="#返回布尔值方式定义资源" aria-label="Permalink to &quot;返回布尔值方式定义资源&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 资源名可使用任意有业务语义的字符串</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SphO</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entry</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">自定义资源名</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 务必保证finally会被执行</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * 被保护的业务逻辑</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    SphO</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 资源访问阻止, 被限流或被降级</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 进行相应的处理操作</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="注解方式定义资源" tabindex="-1">注解方式定义资源 <a class="header-anchor" href="#注解方式定义资源" aria-label="Permalink to &quot;注解方式定义资源&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 原本的业务方法.</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SentinelResource</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">blockHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blockHandlerForGetUser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUserById</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RuntimeException</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">getUserById command failed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// blockHandler 函数, 原方法调用被限流/降级/系统保护的时候调用</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">blockHandlerForGetUser</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">BlockException</span><span style="color:#A6ACCD;"> ex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">admin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="异步调用支持" tabindex="-1">异步调用支持 <a class="header-anchor" href="#异步调用支持" aria-label="Permalink to &quot;异步调用支持&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">AsyncEntry</span><span style="color:#A6ACCD;"> entry </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SphU</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">asyncEntry</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">resourceName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 异步调用.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">doAsync</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">userId</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> result </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 在此处处理异步调用的结果.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 在回调结束后 exit.</span></span>
<span class="line"><span style="color:#A6ACCD;">            entry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BlockException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ex</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Request blocked.</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Handle the exception (e.g. retry or fallback).</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-label="Permalink to &quot;规则&quot;">​</a></h2><h3 id="流量控制规则-flowrule" tabindex="-1">流量控制规则 (FlowRule) <a class="header-anchor" href="#流量控制规则-flowrule" aria-label="Permalink to &quot;流量控制规则 (FlowRule)&quot;">​</a></h3><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名, 资源名是限流规则的作用对象</td><td></td></tr><tr><td>count</td><td>限流阈值</td><td></td></tr><tr><td>grade</td><td>限流阈值类型, QPS(1) 或线程数模式(0)</td><td>QPS 模式</td></tr><tr><td>limitApp</td><td>流控针对的调用来源(<code>default</code> <code>{some_origin_name}</code> <code>other</code>)</td><td>default, 代表不区分调用来源</td></tr><tr><td>strategy</td><td>调用关系限流策略：直接、链路、关联</td><td>根据资源本身（直接）</td></tr><tr><td>controlBehavior</td><td>流控效果（直接拒绝 / 排队等待 / 慢启动模式）, 不支持按调用关系限流</td><td>直接拒绝</td></tr></tbody></table><p>示例代码:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 初始化流控规则</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * &lt;p&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 当 qps 超过 20 时 直接拒绝</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initFlowRules</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">FlowRule</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> rules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">FlowRule</span><span style="color:#A6ACCD;"> rule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FlowRule</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setResource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Set limit QPS to 20. QPS: req/sec 每秒请求数</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCount</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setGrade</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RuleConstant</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FLOW_GRADE_QPS</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setLimitApp</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rule</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    FlowRuleManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadRules</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rules</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="熔断降级规则-degraderule" tabindex="-1">熔断降级规则 (DegradeRule) <a class="header-anchor" href="#熔断降级规则-degraderule" aria-label="Permalink to &quot;熔断降级规则 (DegradeRule)&quot;">​</a></h3><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名, 资源名是限流规则的作用对象</td><td></td></tr><tr><td>count</td><td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td><td></td></tr><tr><td>grade</td><td>熔断策略, 支持慢调用比例/异常比例/异常数策略</td><td>慢调用比例</td></tr><tr><td>timeWindow</td><td>熔断时长, 单位为 s</td><td></td></tr><tr><td>minRequestAmount</td><td>熔断触发的最小请求数, 请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td><td>5</td></tr><tr><td>statIntervalMs</td><td>统计时长（单位为 ms）, 如 60*1000 代表分钟级 (1.8.0 引入)</td><td>1000ms</td></tr><tr><td>slowRatioThreshold</td><td>慢调用比例阈值, 仅慢调用比例模式有效（1.8.0 引入）</td><td></td></tr></tbody></table><p>示例代码:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 初始化熔断规则</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * &lt;p&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 当 30s 内当请求数 大于 10 时, 进行熔断触发判定, 如果 慢调用 超过 40% 则进行 10s 熔断</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initDegradeRule</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">DegradeRule</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> rules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">DegradeRule</span><span style="color:#A6ACCD;"> rule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DegradeRule</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">HelloWorld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 30s</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setStatIntervalMs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">30_000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setMinRequestAmount</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setGrade</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CircuitBreakerStrategy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SLOW_REQUEST_RATIO</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getType</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Threshold is 40% error ratio</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setSlowRatioThreshold</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">.4</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 设置最大相应时间为 5ms  否则认为为慢响应</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCount</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTimeWindow</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rule</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    DegradeRuleManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadRules</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rules</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="系统保护规则-systemrule" tabindex="-1">系统保护规则 (SystemRule) <a class="header-anchor" href="#系统保护规则-systemrule" aria-label="Permalink to &quot;系统保护规则 (SystemRule)&quot;">​</a></h3><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>highestSystemLoad</td><td>load1 触发值, 用于触发自适应控制阶段</td><td>-1(不生效)</td></tr><tr><td>avgRt</td><td>所有入口流量的平均响应时间</td><td>-1(不生效)</td></tr><tr><td>maxThread</td><td>入口流量的最大并发数</td><td>-1(不生效)</td></tr><tr><td>qps</td><td>所有入口资源的 QPS</td><td>-1(不生效)</td></tr><tr><td>highestCpuUsage</td><td>当前系统的 CPU 使用率（0.0-1.0）</td><td>-1(不生效)</td></tr></tbody></table><h3 id="访问控制规则-authorityrule" tabindex="-1">访问控制规则 (AuthorityRule) <a class="header-anchor" href="#访问控制规则-authorityrule" aria-label="Permalink to &quot;访问控制规则 (AuthorityRule)&quot;">​</a></h3><blockquote><p>根据调用方来限制资源是否通过</p></blockquote><table><thead><tr><th>Field</th><th>说明</th></tr></thead><tbody><tr><td>resource</td><td>资源名，即限流规则的作用对象</td></tr><tr><td>limitApp</td><td>对应的黑名单/白名单，不同 origin 用 , 分隔，如 appA,appB</td></tr><tr><td>strategy</td><td>限制模式，AUTHORITY_WHITE 为白名单模式，AUTHORITY_BLACK 为黑名单模式，默认为白名单模式</td></tr></tbody></table><h3 id="热点规则-paramflowrule" tabindex="-1">热点规则 (ParamFlowRule) <a class="header-anchor" href="#热点规则-paramflowrule" aria-label="Permalink to &quot;热点规则 (ParamFlowRule)&quot;">​</a></h3><h2 id="流量控制" tabindex="-1">流量控制 <a class="header-anchor" href="#流量控制" aria-label="Permalink to &quot;流量控制&quot;">​</a></h2><p><code>FlowSlot</code> 会根据预设的规则, 结合前面 <code>NodeSelectorSlot</code> <code>ClusterNodeBuilderSlot</code> <code>StatistcSlot</code> 统计出来的实时信息进行流量控制</p><p>直接表现: 执行 <code>Entry nodeA = SphU.entry(资源名字)</code> 的时候抛出 <code>FlowException</code> (<code>BlockException</code>的子类) 异常</p><h3 id="查看实时统计信息" tabindex="-1">查看实时统计信息 <a class="header-anchor" href="#查看实时统计信息" aria-label="Permalink to &quot;查看实时统计信息&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:8719/cnode?id=resourceName</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">idx id         thread    pass      blocked   success    total    aRt   1m-pass   1m-block   1m-all   exception  </span></span>
<span class="line"><span style="color:#A6ACCD;">2   HelloWorld 0         36.0      0.0       36.0       36.0     0.4722222222222222134       0          134      0.0</span></span></code></pre></div><p>响应说明:</p><ul><li>thread： 代表当前处理该资源的线程数；</li><li>pass： 代表一秒内到来到的请求；</li><li>blocked： 代表一秒内被流量控制的请求数量；</li><li>success： 代表一秒内成功处理完的请求；</li><li>total： 代表到一秒内到来的请求以及被阻止的请求总和；</li><li>RT： 代表一秒内该资源的平均响应时间；</li><li>1m-pass： 则是一分钟内到来的请求；</li><li>1m-block： 则是一分钟内被阻止的请求；</li><li>1m-all： 则是一分钟内到来的请求和被阻止的请求的总和；</li><li>exception： 则是一秒内业务本身异常的总和</li></ul><h3 id="基于qps-并发数的流量控制" tabindex="-1">基于QPS/并发数的流量控制 <a class="header-anchor" href="#基于qps-并发数的流量控制" aria-label="Permalink to &quot;基于QPS/并发数的流量控制&quot;">​</a></h3><h4 id="并发线程数流量控制" tabindex="-1">并发线程数流量控制 <a class="header-anchor" href="#并发线程数流量控制" aria-label="Permalink to &quot;并发线程数流量控制&quot;">​</a></h4><p>线程数限流用于保护业务线程数不被耗尽</p><p>Sentinel线程数限流不负责创建和管理线程池, 而是简单统计当前请求上下文的线程个数, 如果超出阈值, 新的请求会被立即拒绝</p><h4 id="qps流量控制-controlbehavior" tabindex="-1">QPS流量控制(controlBehavior) <a class="header-anchor" href="#qps流量控制-controlbehavior" aria-label="Permalink to &quot;QPS流量控制(controlBehavior)&quot;">​</a></h4><ul><li>直接拒绝 - RuleConstant.CONTROL_BEHAVIOR_DEFAULT (默认) 当QPS超过任意规则的阈值后, 新的请求就会被立即拒绝, 拒绝方式为抛出FlowException <ul><li>适用于对系统处理能力确切已知的情况下</li></ul></li><li>冷启动 - RuleConstant.CONTROL_BEHAVIOR_WARM_UP 让通过的流量缓慢增加, 在一定时间内逐渐增加到阈值上限, 在一定时间内逐渐增加到阈值上限, 避免冷系统被压垮的情况 <ul><li>适用于系统长期处于低水位的情况下, 当流量突然增加时, 直接把系统拉升到高水位可能瞬间把系统压垮</li></ul></li><li>匀速器 - RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER 严格控制了请求通过的间隔时间, 即让请求匀速通过, 对应的是漏桶算法 <ul><li>适用于处理间隔性突发的流量, 例如消息队列</li></ul></li></ul><h3 id="基于调用关系的流量控制" tabindex="-1">基于调用关系的流量控制 <a class="header-anchor" href="#基于调用关系的流量控制" aria-label="Permalink to &quot;基于调用关系的流量控制&quot;">​</a></h3><p>Sentinel 通过 <code>NodeSelectorSlot</code> 建立不同资源间的调用的关系 并且通过 <code>ContextUtil.enter(resourceName, origin)</code> 记录每个资源的实时统计信息</p><h4 id="根据调用方进行限流" tabindex="-1">根据调用方进行限流 <a class="header-anchor" href="#根据调用方进行限流" aria-label="Permalink to &quot;根据调用方进行限流&quot;">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// origin 标明了调用方身份  这些信息会在 ContextUtil.enter(resourceName, origin) 进行统计</span></span>
<span class="line"><span style="color:#A6ACCD;">ContextUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">resourceName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> origin</span><span style="color:#89DDFF;">)</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:8719/origin?id=nodeA</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h5 id="limitapp-配置" tabindex="-1">limitApp 配置 <a class="header-anchor" href="#limitapp-配置" aria-label="Permalink to &quot;limitApp 配置&quot;">​</a></h5><ul><li><code>default</code> 表示不区分调用者, 来自任何调用者的请求都将进行限流统计, 如果这个资源名的调用总和超过了这条规则定义的阈值, 则触发限流</li><li><code>{some_origin_name}</code> 表示针对特定的调用者, 只有来自这个调用者的请求才会进行流量控制</li><li><code>other</code> 表示针对除 {some_origin_name} 以外的其余调用方的流量进行流量控制 资源NodeA配置了一条针对调用者 <code>caller1</code> 的限流规则, 同时又配置了一条调用者为 <code>other</code> 的规则, 那么任意来自非 caller1 对 NodeA 的调用, 都不能超过 other 这条规则定义的阈值</li></ul><h4 id="根据调用链路入口限流-链路限流" tabindex="-1">根据调用链路入口限流: 链路限流 <a class="header-anchor" href="#根据调用链路入口限流-链路限流" aria-label="Permalink to &quot;根据调用链路入口限流: 链路限流&quot;">​</a></h4><p><code>NodeSelectorSlot</code> 中记录了资源之间的调用链路 这些资源通过调用关系 相互之间构成一棵调用树, 这棵树的根节点是一个名字为 <code>machine-root</code> 的虚拟节点 调用链的入口都是这个虚节点的子节点</p><ul><li>设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.CHAIN</code></li><li>设置 <code>FlowRule.ref_identity</code> 为 <code>Entrance1</code></li></ul><p>只有从入口 Entrance1 的调用才会记录到 NodeA 的限流统计当中 而对来自 Entrance2 的调用不关心</p><blockquote><p>调用链的入口是通过 API 方法 <code>ContextUtil.enter(name)</code> 定义的</p></blockquote><h4 id="具有关系的资源流量控制-关联流量控制" tabindex="-1">具有关系的资源流量控制：关联流量控制 <a class="header-anchor" href="#具有关系的资源流量控制-关联流量控制" aria-label="Permalink to &quot;具有关系的资源流量控制：关联流量控制&quot;">​</a></h4><p>当两个资源之间具有资源争抢或者依赖关系的时候, 这两个资源便具有了关联</p><p>假设 <code>read_db</code> 和 <code>write_db</code> 这两个资源分别代表数据库读写</p><ul><li>设置 <code>FlowRule.strategy</code> 为 <code>RuleConstant.RELATE</code></li><li>设置 <code>FlowRule.ref_identity</code> 为 <code>write_db</code></li></ul><p>则 当写库操作过于频繁时 读数据的请求会被限流</p><h2 id="熔断降级" tabindex="-1">熔断降级 <a class="header-anchor" href="#熔断降级" aria-label="Permalink to &quot;熔断降级&quot;">​</a></h2><p>现代微服务架构都是分布式的, 由非常多的服务组成 不同服务之间相互调用, 组成复杂的调用链路 以上的问题在链路调用中会产生放大的效果 复杂链路上的某一环不稳定, 就可能会层层级联, 最终导致整个链路都不可用 因此我们需要对不稳定的<strong>弱依赖服务</strong>调用进行熔断降级, 暂时切断不稳定调用, 避免局部不稳定因素导致整体的雪崩 熔断降级作为保护自身的手段, 通常在客户端（调用端）进行配置</p><h3 id="熔断策略" tabindex="-1">熔断策略 <a class="header-anchor" href="#熔断策略" aria-label="Permalink to &quot;熔断策略&quot;">​</a></h3><ul><li>慢调用比例 - SLOW_REQUEST_RATIO 选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。 当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。 经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li><li>异常比例 - ERROR_RATIO 当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。 经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</li><li>异常数 - ERROR_COUNT 当单位统计时长内的异常数目超过阈值之后会自动进行熔断。 经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li></ul><blockquote><p>注意异常降级仅针对业务异常，对 Sentinel 限流降级本身的异常（BlockException）不生效。 为了统计异常比例或异常数，需要通过 Tracer.trace(ex) 记录业务异常。 开源整合模块，如 Sentinel Dubbo Adapter, Sentinel Web Servlet Filter 或 @SentinelResource 注解会自动统计业务异常，无需手动调用。</p></blockquote><h3 id="熔断事件监听" tabindex="-1">熔断事件监听 <a class="header-anchor" href="#熔断事件监听" aria-label="Permalink to &quot;熔断事件监听&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">EventObserverRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">addStateChangeObserver</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">logging</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">prevState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> newState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> rule</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> snapshotValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newState </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> CircuitBreaker</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OPEN</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 变换至 OPEN state 时会携带触发时的值</span></span>
<span class="line"><span style="color:#A6ACCD;">          System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s -&gt; OPEN at %d, snapshotValue=%.2f</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> prevState</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                  TimeUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> snapshotValue</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%s -&gt; %s at %d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> prevState</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> newState</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">                  TimeUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">});</span></span></code></pre></div>`,64),t=[e];function p(c,r,y,D,i,F){return a(),l("div",null,t)}const C=s(o,[["render",p]]);export{d as __pageData,C as default};
