import{_ as a,o as e,c as t,O as o}from"./chunks/framework.a9f788d3.js";const b=JSON.parse('{"title":"类型转换","description":"","frontmatter":{},"headers":[],"relativePath":"java/基础/类型转换.md"}'),s={name:"java/基础/类型转换.md"},l=o('<h1 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h1><blockquote><p>类型强转时, 编译器不会报错, 运行后才可能会报错 =&gt; 抛出 ClassCaseException 类型转换异常</p></blockquote><h2 id="向上转型" tabindex="-1">向上转型 <a class="header-anchor" href="#向上转型" aria-label="Permalink to &quot;向上转型&quot;">​</a></h2><p>父类 指向 子类</p><blockquote><p>小转大 安全</p></blockquote><h2 id="向下转型" tabindex="-1">向下转型 <a class="header-anchor" href="#向下转型" aria-label="Permalink to &quot;向下转型&quot;">​</a></h2><p>子类 转向 父类</p><blockquote><p>大转小 不安全</p></blockquote><h2 id="判断对象的实际类型" tabindex="-1">判断对象的实际类型 <a class="header-anchor" href="#判断对象的实际类型" aria-label="Permalink to &quot;判断对象的实际类型&quot;">​</a></h2><blockquote><p>常用思路: 先判断类型, 再进行类型强转</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">对象 </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> 类</span></span></code></pre></div>',11),n=[l];function c(r,p,i,_,d,h){return e(),t("div",null,n)}const q=a(s,[["render",c]]);export{b as __pageData,q as default};
