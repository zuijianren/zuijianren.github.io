import{_ as e,o,c as t,O as c}from"./chunks/framework.a9f788d3.js";const h=JSON.parse('{"title":"接口类","description":"","frontmatter":{},"headers":[],"relativePath":"modules/java/基础/接口.md"}'),d={name:"modules/java/基础/接口.md"},a=c('<h1 id="接口类" tabindex="-1">接口类 <a class="header-anchor" href="#接口类" aria-label="Permalink to &quot;接口类&quot;">​</a></h1><blockquote><p>如果是 jdk7, 那么接口中只可以包含 <code>常量</code> 和 <code>抽象方法</code><br> 如果是 jdk8, 还可以额外包含 <code>静态方法</code> 和 <code>默认方法</code><br> 如果是 jdk9, 还可以额外包含 <code>私有方法</code></p></blockquote><ul><li>接口不能有静态代码块，或者构造方法</li><li>一个类的直接父类是唯一的，但一个类可以实现多个接口</li><li>如果实现类所实现的接口中，存在重复的抽象方法，那么只需要覆盖重写一次即可</li><li>如果实现类没有覆盖重写所有接口当中存在的抽象方法，那么实现类必须是一个抽象类</li><li>如果实现类所实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法重写</li><li>一个类如果它的直接父类的方法，和接口当中的默认方法产生冲突，优先使用父类方法。（<strong>即继承优先于接口实现</strong>）</li><li>多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写。（必须带<code>default</code> 关键字）</li><li>接口继承接口，使用 <code>extends</code> ，而不是使用 <code>implements</code> （因为接口不会实现方法，所以无法使用 <code>implements</code> 关键字）</li></ul>',3),l=[a];function i(s,_,r,n,m,p){return o(),t("div",null,l)}const f=e(d,[["render",i]]);export{h as __pageData,f as default};
