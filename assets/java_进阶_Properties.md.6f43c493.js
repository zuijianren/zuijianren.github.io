import{_ as s,o as a,c as e,O as o}from"./chunks/framework.a9f788d3.js";const y=JSON.parse('{"title":"properties","description":"","frontmatter":{},"headers":[],"relativePath":"java/进阶/Properties.md"}'),p={name:"java/进阶/Properties.md"},r=o(`<h1 id="properties" tabindex="-1">properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;properties&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>在 Java 中, Properties 是一种 key-value 对（键值对）集合, 用于存储配置数据或应用程序的属性。通常情况下, Properties 文件以 <code>.properties</code> 的扩展名存储在类路径下, 它们经常被用作配置文件, 也可以用来存储文本数据。</p><p>Properties 对象可以使用 <code>load</code> 方法从输入流中读取数据，并将其读入 Properties 表中 Properties 对象也可以使用 <code>store</code> 方法将其表中的内容写入到输出流中</p><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><p>Properties 类继承自 Hashtable 类，因此它具有所有 Hashtable 的性质</p><ol><li>线程安全的</li><li>以哈希表的形式存储键值对</li></ol><h2 id="常用功能" tabindex="-1">常用功能 <a class="header-anchor" href="#常用功能" aria-label="Permalink to &quot;常用功能&quot;">​</a></h2><h3 id="读取-properties-配置文件的方法" tabindex="-1">读取 properties 配置文件的方法 <a class="header-anchor" href="#读取-properties-配置文件的方法" aria-label="Permalink to &quot;读取 properties 配置文件的方法&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 通过类加载器读取 properties 文件</span></span>
<span class="line"><span style="color:#C792EA;">InputStream</span><span style="color:#A6ACCD;"> is </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ServiceTest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getResourceAsStream</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">application.properties</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">Properties</span><span style="color:#A6ACCD;"> properties </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Properties</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">properties</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">is</span><span style="color:#89DDFF;">);</span></span></code></pre></div>`,10),t=[r];function l(n,c,i,d,D,F){return a(),e("div",null,t)}const A=s(p,[["render",l]]);export{y as __pageData,A as default};
