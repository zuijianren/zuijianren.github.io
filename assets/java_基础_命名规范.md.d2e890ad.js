import{_ as e,o,c,O as a}from"./chunks/framework.a9f788d3.js";const m=JSON.parse('{"title":"命名规范","description":"","frontmatter":{},"headers":[],"relativePath":"java/基础/命名规范.md"}'),t={name:"java/基础/命名规范.md"},d=a('<h1 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h1><ol><li>对于 <code>变量名</code> 和 <code>方法名</code>, <code>_</code> 和 <code>$</code> 不作为标识符的第一个字符, 因为这两个字符对于内部类具有特殊含义</li><li><code>类名</code>, <code>接口名</code> 采用 <code>大小写混合</code> 的形式, 即每个单词的首字母大写, 其余小写</li><li><code>变量名</code> 和 <code>方法名</code> 也采用 <code>大小写混合</code> 的方式, 但首字母小写. 这种写法也叫做 <code>驼峰命名法</code></li><li><code>常量名</code> 完全大写, 并且用下划线 <code>_</code> 作为标识符中各个单词的分隔符</li><li><code>方法名</code> 应该使用 <code>动词</code> 表示<br><code>类名</code> 与 <code>接口名</code> 使用 <code>名词</code> 表示</li><li><code>变量名</code> 应该能够标识一定的含义, 因此尽量 <code>不使用单个字符</code> 作为变量名, <code>临时性变量名</code> 除外</li></ol><h2 id="一些常见的命名区别" tabindex="-1">一些常见的命名区别 <a class="header-anchor" href="#一些常见的命名区别" aria-label="Permalink to &quot;一些常见的命名区别&quot;">​</a></h2><h3 id="status-和-state" tabindex="-1">status 和 state <a class="header-anchor" href="#status-和-state" aria-label="Permalink to &quot;status 和 state&quot;">​</a></h3><ul><li>state:<br> 用于多个状态能够互相切换的情况. 如 水的三种状态</li><li>status:<br> 用于没有状态互相切换的情况. 如 http status code</li></ul>',5),s=[d];function i(l,r,_,n,h,u){return o(),c("div",null,s)}const f=e(t,[["render",i]]);export{m as __pageData,f as default};
