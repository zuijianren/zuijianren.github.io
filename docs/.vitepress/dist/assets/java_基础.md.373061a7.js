import{_ as s,c as a,o as n,O as l}from"./chunks/framework.5a84fa57.js";const F=JSON.parse('{"title":"基础","description":"","frontmatter":{},"headers":[],"relativePath":"java/基础.md"}'),o={name:"java/基础.md"},p=l(`<h1 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="java-的三大特性" tabindex="-1">java 的三大特性 <a class="header-anchor" href="#java-的三大特性" aria-label="Permalink to &quot;java 的三大特性&quot;">​</a></h3><p>封装，继承，多态</p><h3 id="jdk-jre-jvm-的区别" tabindex="-1">jdk, jre, jvm 的区别 <a class="header-anchor" href="#jdk-jre-jvm-的区别" aria-label="Permalink to &quot;jdk, jre, jvm 的区别&quot;">​</a></h3><blockquote><p>三者属于包含关系</p></blockquote><ul><li>JDK(Java SE Development Kit)，Java 标准开发包。 它提供了编译、运行 Java 程序所需的各种工具和资源，包括 Java 编译器、Java 运行时环境，以及常用的 Java 类库等。</li><li>JRE( Java Runtime Environment) ，Java 运行环境。 用于解释执行 Java 的字节码文件。普通用户而只需要安装 JRE（Java Runtime Environment）来运行 Java 程序。而程序开发者必须安装 JDK 来编译、调试程序。</li><li>JVM(Java Virtual Mechinal)，Java 虚拟机，是 JRE 的一部分。 它是整个 java 实现跨平台的最核心的部分，负责解释执行字节码文件，是可运行 java 字节码文件的虚拟计算机。所有平台的上的 JVM 向编译器提供相同的接口，而编译器只需要面向虚拟机，生成虚拟机能识别的代码，然后由虚拟机来解释执行。</li></ul><h2 id="快速体验" tabindex="-1">快速体验 <a class="header-anchor" href="#快速体验" aria-label="Permalink to &quot;快速体验&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 提前准备一份 HelloWorld.java 代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将java代码编译为class文件</span></span>
<span class="line"><span style="color:#FFCB6B;">javac</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld.java</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 如果java代码中带有中文字符，会报错 -&gt; 错误: 编码GBK的不可映射字符</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 可以用如下的方法进行编译</span></span>
<span class="line"><span style="color:#FFCB6B;">javac</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-encoding</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">utf-</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 执行class文件 不能带class后缀</span></span>
<span class="line"><span style="color:#FFCB6B;">java</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 反编译class文件</span></span>
<span class="line"><span style="color:#FFCB6B;">javap</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld</span></span>
<span class="line"><span style="color:#FFCB6B;">javap</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HelloWorld</span></span></code></pre></div><h2 id="规范及语法" tabindex="-1">规范及语法 <a class="header-anchor" href="#规范及语法" aria-label="Permalink to &quot;规范及语法&quot;">​</a></h2><h3 id="java-命名" tabindex="-1">java 命名 <a class="header-anchor" href="#java-命名" aria-label="Permalink to &quot;java 命名&quot;">​</a></h3><ol><li>对于变量名和方法名，<code>_</code> 和 <code>$</code> 不作为标识符的第一个字符，因为这两个字符对于内部类具有特殊含义</li><li>类名，接口名 采用 大小写混合 的形式，即每个单词的首字母大写，其余小写</li><li>变量名和方法名也采用大小写混合的方式，但第一个单词的首字母小写, 也叫做 驼峰命名法</li><li>常量名完全大写，并且用下划线 <code>_</code> 作为标识符中各个单词的分隔符</li><li>方法名应该使用动词表示 类名与接口名 使用名词表示</li><li>变量名应该能够标识一定的含义，因此尽量不使用单个字符作为变量名，临时性变量名除外</li></ol><h4 id="一些常见的命名区别" tabindex="-1">一些常见的命名区别 <a class="header-anchor" href="#一些常见的命名区别" aria-label="Permalink to &quot;一些常见的命名区别&quot;">​</a></h4><h5 id="status-和-state" tabindex="-1">status 和 state <a class="header-anchor" href="#status-和-state" aria-label="Permalink to &quot;status 和 state&quot;">​</a></h5><ul><li>state: 用于多个状态能够互相切换的情况. 如 水的三种状态</li><li>status: 用于没有状态互相切换的情况. 如 http status code</li></ul><h3 id="java-注释" tabindex="-1">java 注释 <a class="header-anchor" href="#java-注释" aria-label="Permalink to &quot;java 注释&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 单行注释</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">多行注释</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* 方法, 类名, 常量等的文档注释</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span></code></pre></div><h2 id="java-相关的一些分类" tabindex="-1">java 相关的一些分类 <a class="header-anchor" href="#java-相关的一些分类" aria-label="Permalink to &quot;java 相关的一些分类&quot;">​</a></h2><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><blockquote><p>String 不是基本数据类型, 底层是数组实现的</p></blockquote><table><thead><tr><th>种类</th><th>字节数</th><th>表示范围</th></tr></thead><tbody><tr><td>boolean</td><td>1</td><td>true/false</td></tr><tr><td>char</td><td>2</td><td>表示一个字符, 汉字也算一个字符</td></tr><tr><td>byte</td><td>1</td><td>-2^7^~2^7^-1</td></tr><tr><td>short</td><td>2</td><td>-2^15^~2^15^-1</td></tr><tr><td>int</td><td>4</td><td>-2^31^~2^31^-1</td></tr><tr><td>long</td><td>8</td><td>-2^63^~2^63^-1</td></tr><tr><td>float</td><td>4</td><td>由 1 位表示正负的符号位、8 位指数位和 23 位有效数字位组成</td></tr><tr><td>double</td><td>8</td><td>由 1 位表示正负的符号位、11 位指数位和 52 位有效数字位组成</td></tr></tbody></table><h3 id="可访问性" tabindex="-1">可访问性 <a class="header-anchor" href="#可访问性" aria-label="Permalink to &quot;可访问性&quot;">​</a></h3><ul><li>private(私有)</li><li>default(包)</li><li>protected(子类)</li><li>public(公有)</li></ul><h3 id="类的分类" tabindex="-1">类的分类 <a class="header-anchor" href="#类的分类" aria-label="Permalink to &quot;类的分类&quot;">​</a></h3><ul><li>基本类</li><li>接口类</li><li>抽象类</li><li>内部类</li><li>枚举类</li></ul><h3 id="程序种类" tabindex="-1">程序种类 <a class="header-anchor" href="#程序种类" aria-label="Permalink to &quot;程序种类&quot;">​</a></h3><ul><li>内嵌于 web 文件中, 由浏览器来查看的 Applet (浏览器调用 java 虚拟机执行)</li><li>可独立运行的 Application</li><li>服务端的 Servlets</li></ul><h2 id="数值运算" tabindex="-1">数值运算 <a class="header-anchor" href="#数值运算" aria-label="Permalink to &quot;数值运算&quot;">​</a></h2><h3 id="原码-补码-反码" tabindex="-1">原码 补码 反码 <a class="header-anchor" href="#原码-补码-反码" aria-label="Permalink to &quot;原码 补码 反码&quot;">​</a></h3><blockquote><p>计算机在进行数值运算的时候, 是通过 &#39;补码&#39; 表示的每个数值</p></blockquote><p>示例:</p><table><thead><tr><th>数值</th><th>原码</th><th>反码</th><th>补码</th><th>说明</th></tr></thead><tbody><tr><td>-128</td><td>1000 000</td><td>1111 1111</td><td>1000 000</td><td>0 没有正负之分, 因此原用来表示-0 的值用于表示 -128</td></tr><tr><td>127</td><td>0111 1111</td><td>0111 1111</td><td>0111 1111</td><td></td></tr><tr><td>-1</td><td>1000 0001</td><td>1111 1110</td><td>1111 1111</td><td></td></tr></tbody></table><h4 id="原码" tabindex="-1">原码 <a class="header-anchor" href="#原码" aria-label="Permalink to &quot;原码&quot;">​</a></h4><blockquote><p>以二进制表示的数字</p></blockquote><h4 id="反码" tabindex="-1">反码 <a class="header-anchor" href="#反码" aria-label="Permalink to &quot;反码&quot;">​</a></h4><ul><li>正数与原码相同</li><li>负数, 保留符号位不变, 其余按位取反</li></ul><h4 id="补码" tabindex="-1">补码 <a class="header-anchor" href="#补码" aria-label="Permalink to &quot;补码&quot;">​</a></h4><ul><li>正数与原码相同</li><li>负数, 在反码的基础上, 加 1. <blockquote><p>即 相对于原码, 按位取反再加 1 如果想要得到原码, 则需要将当前补码看作原码进行求补</p></blockquote></li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>上述所讲的原码, 补码, 反码仅是一种简单的获取结果的方法, 以下是相关的实际原理:</p><p><strong>补码 <code>two&#39;s complement</code></strong> 即 对 2 求补, 这个 2 指的是计数系统的容量（模），就是计数系统所能表示的状态数, 例如在 4 位二进制中, 这个 2 就是 2^4^ 比如: 1 个符号位+3 个数值位 =&gt; 则容量为 2^4^ =&gt; x 的补码为 (2^4^+x)%2^4^</p><p><strong>反码 <code>ones&#39; complement</code></strong> 即 对 1 求补, 这个 1 指的是计数系统所能表示的最大的值, 例如 8 位二进制中, 这个 1 就是 <code>1111 1111</code>, 在 1 位十进制中就是 9 比如: 1 个符号位 + 3 个数值位 =&gt; 则 1 表示 2^4^-1 =&gt; x 的反码为 (2^4^-1+x)%(2^4^-1)</p><p><strong>补码的意义就是把负数变成它对应的正数, 然后参与运算</strong> 那么就不用进行减法运算了，只要使用加法就行了</p><p><strong>补码为什么等于反码加 1</strong> 这个结论, 仅仅只是因为反码和补码的推导关系得出, 实际并没有意义 上方我声明了两个等式: x 的反码 = (2^4^-1+x)%(2^4^-1) x 的补码 = (2^4^+x)%2^4^ =&gt; 补码 = 反码 + 1</p><p><strong>为什么补码的第一位数可以被看作符号位</strong> 补码实际没有符号位, 所有的位数都需要参加运算, 这样才能满足计算机计算的需求, 因为计算机是不认识正负的.</p><p><a href="https://blog.csdn.net/qq_45472866/article/details/114779170" target="_blank" rel="noreferrer">参考博客</a></p><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><ul><li><code>&gt;&gt;</code> 右移 (符号位不进行处理）</li><li><code>&gt;&gt;&gt;</code> 无符号右移</li><li><code>&lt;&lt;</code> 左移 (符号位不进行处理）</li><li><code>&lt;&lt;&lt;</code> 无符号左移</li><li><code>&amp;</code> 与</li><li><code>|</code> 或</li><li><code>~</code> 非</li><li><code>^</code> 异或</li></ul><p>算术运算符：（两个箭头符号的运算符）</p><blockquote><p>正数右移，高位用 0 补；负数右移，高位用 1 补 正数或者负数左移，低位都是用 0 补</p></blockquote><p>逻辑运算符：（三个箭头符号的运算符）</p><blockquote><p>不考虑符号位</p></blockquote><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><h3 id="string-stringbuilder-stringbuffer" tabindex="-1">String, StringBuilder, StringBuffer <a class="header-anchor" href="#string-stringbuilder-stringbuffer" aria-label="Permalink to &quot;String, StringBuilder, StringBuffer&quot;">​</a></h3><ul><li>String <blockquote><p>字符串是常量，在创建之后不能被修改, 实际是一个被 final 修饰的数组</p></blockquote></li><li>StringBuilder(线程不安全) <blockquote><p>底层也是一个数组 但是没有被 final 修饰，可以改变长度 StringBuilder 在内存中始终是一个数组，占用空间少，效率高，如果超出了 StringBuilder 的容量，会自动的扩容</p></blockquote></li><li>StringBuffer(线程安全) <blockquote><p>类似 StringBuilder</p></blockquote></li></ul><h3 id="string-常用方法" tabindex="-1">String 常用方法 <a class="header-anchor" href="#string-常用方法" aria-label="Permalink to &quot;String 常用方法&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 返回当前字符串的长度</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">length</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查找 字符/字符串 在该字符串第一次出现的位置</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">indexOf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ch</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">indexOf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查找 字符/字符串 在该字符串最后一次出现的位置</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lastIndexOf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ch</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">lastIndexOf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取字符串中指定位置的字符</span></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">charAt</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> Index</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取从指定位置开始到结束的子字符串 (包含开始位置, 不包含结束位置)</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">subString</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> beginIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> endIndex</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将字符串分割为子字符串，返回字符串数组</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">split</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">split</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> regex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> limit</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 返回去除了字符串前后空格的字符串</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">trim</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将字符串转换为小写</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将字符串转换为大写</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  将该字符串转换为byte数组</span></span>
<span class="line"><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBytes</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将 字符/字符数组 转为字符串</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">[])</span></span>
<span class="line"><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 字符转数字</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 先转为字符串，再由字符串转数字</span></span>
<span class="line"><span style="color:#A6ACCD;">Integer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseInt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">))</span></span></code></pre></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 静态初始化</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> words1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">love</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">games</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 简化写法</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> words2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">love</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">games</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 动态初始化</span></span>
<span class="line"><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> words3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">/* 这种方式, 则必须指定大小 */</span></span>
<span class="line"><span style="color:#A6ACCD;">words3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">love</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">games</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="arrays-数组的工具类" tabindex="-1">Arrays--数组的工具类 <a class="header-anchor" href="#arrays-数组的工具类" aria-label="Permalink to &quot;Arrays--数组的工具类&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 数组转List</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">asList</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将数组转为流</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Stream</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 排序</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> fromIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> toIndex</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parallelSort</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 二分查找</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">binarySearch</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 指定元素填充数组</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fill</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> val</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 复制数组, 多余长度以 null 填充</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">copyOf</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> original</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> newLength</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 设置指定数组的所有元素, 使用提供的生成器函数计算每个元素</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setAll</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IntFunction</span><span style="color:#89DDFF;">&lt;</span><span style="color:#89DDFF;font-style:italic;">?</span><span style="color:#A6ACCD;"> extends T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> generator</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,62),t=[p];function e(r,c,i,y,D,A){return n(),a("div",null,t)}const d=s(o,[["render",e]]);export{F as __pageData,d as default};
