import{_ as s,c as a,o as n,O as l}from"./chunks/framework.5a84fa57.js";const i=JSON.parse('{"title":"多态","description":"","frontmatter":{},"headers":[],"relativePath":"java/多态.md"}'),p={name:"java/多态.md"},o=l(`<h1 id="多态" tabindex="-1">多态 <a class="header-anchor" href="#多态" aria-label="Permalink to &quot;多态&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="理论" tabindex="-1">理论 <a class="header-anchor" href="#理论" aria-label="Permalink to &quot;理论&quot;">​</a></h3><p>代码中体现子类 =&gt; 父类指向子类对象</p><h3 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h3><ul><li>父类名称 对象名 = new 子类名称();</li><li>接口名称 对象名 = new 实现类名称();</li></ul><h3 id="好处" tabindex="-1">好处 <a class="header-anchor" href="#好处" aria-label="Permalink to &quot;好处&quot;">​</a></h3><p>无论右边new任何子类的对象, 等号左边调用的方法都不会产生任何变化</p><h2 id="访问成员变量的两种方法" tabindex="-1">访问成员变量的两种方法 <a class="header-anchor" href="#访问成员变量的两种方法" aria-label="Permalink to &quot;访问成员变量的两种方法&quot;">​</a></h2><ol><li>直接通过 <code>对象名称</code> 访问成员变量, 看等号左边是谁, 则优先用谁, 没有则向上查找 <blockquote><p>编译看左边, 运行也看左边</p></blockquote></li><li>间接通过 <code>对象方法</code> 访问变量, 该方法属于谁, 则优先用谁, 没有则向上查找 <blockquote><p>编译看左边, 运行看右边</p></blockquote></li></ol><p>示例代码:</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Fu</span><span style="color:#A6ACCD;"> fu </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Fu</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fu</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//输出5</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fu</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getNum</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//输出5</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Zi</span><span style="color:#A6ACCD;"> zi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Zi</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">zi</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//输出8</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">zi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getNum</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//输出8</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Fu</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Zi</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//输出5</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getNum</span><span style="color:#89DDFF;">());</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//输出8</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fu</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNum</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Zi</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fu</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNum</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="对象转型" tabindex="-1">对象转型 <a class="header-anchor" href="#对象转型" aria-label="Permalink to &quot;对象转型&quot;">​</a></h2><blockquote><p>类型强转时, 编译器不会报错, 运行后才会报错 =&gt; 抛出 ClassCaseException 类型转换异常</p></blockquote><h3 id="对象向上转型" tabindex="-1">对象向上转型 <a class="header-anchor" href="#对象向上转型" aria-label="Permalink to &quot;对象向上转型&quot;">​</a></h3><p>父类 指向 子类</p><blockquote><p>小转大 安全</p></blockquote><h3 id="对象向下转型" tabindex="-1">对象向下转型 <a class="header-anchor" href="#对象向下转型" aria-label="Permalink to &quot;对象向下转型&quot;">​</a></h3><p>子类 转向 父类</p><blockquote><p>大转小 不安全</p></blockquote><h2 id="判断对象的实际类型" tabindex="-1">判断对象的实际类型 <a class="header-anchor" href="#判断对象的实际类型" aria-label="Permalink to &quot;判断对象的实际类型&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">对象 </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> 类名</span></span></code></pre></div><p>常用思路: 先判断类型, 再进行类型强转</p><h2 id="装箱与拆箱" tabindex="-1">装箱与拆箱 <a class="header-anchor" href="#装箱与拆箱" aria-label="Permalink to &quot;装箱与拆箱&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 装箱</span></span>
<span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">243</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//编译器转译为：Integer a = Integer.valueOf(243)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 拆箱</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//编译器会修改成：int b = a.intValue();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 缓存[-128,127]之间的数字</span></span>
<span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> i1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> i2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> i2</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//true 因为 -128 在缓存范围内</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i2</span><span style="color:#89DDFF;">));</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> i3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> i4 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">128</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i3 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> i4</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//false 因为 128 不在缓存范围内</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i4</span><span style="color:#89DDFF;">));</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Integer对象将会自动生成一个缓存数组cache[256]，其值为[-128,127]之间，如果请求封装的数字在这之间，将会直接调用，否则才会new一个新的对象  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 因此，i1 和 i2 引用的是同一个对象，“==”操作的结果为 true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 而 i3 和 i4 的结果为 false</span></span></code></pre></div>`,25),e=[o];function t(c,r,y,D,F,A){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
